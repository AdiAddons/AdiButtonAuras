h1. Rule API

The rules are hard-coded in Rules.lua using a pretty simple "Domain Specific Language":https://en.wikipedia.org/wiki/Domain_specific_language built on top of Lua.

Each rules specifies the spells to modify, the units and events to watch and one or more handlers. Several rules about the same spell are merged together, or thrown away if the character does not know the spell.

Each time one of the event is triggered for one of the unit, the handlers are called to update the state of the associated button.

A set of convenient functions are provided to easily configure most spells. If a more specific task is needed, Lua can be used (see interrupt spells).

h2. Main function

@addon.CreateRules()@ is the main function of Rules.lua. It returns a table of functions. They are called each time the player spells change to find out which spells should be watched.

The minimal @addon.CreateRules()@ is this:

bc. function addon.CreateRules()
	return {} -- No rules
end

h2. Rule anatomy

A rule a built around 4 elements : spells, units, events and handlers.

h3. Spells

The spell the rule applies to. These are numerical spell identifiers, which can be found in wowhead or wowdb links, e.g. the link of Charge on wowhead is "http://www.wowhead.com/spell=100":http://www.wowhead.com/spell=100 and "http://www.wowdb.com/spells/100-charge":http://www.wowdb.com/spells/100-charge for wowdb. The number in that link, 100, is the identifier of Charge. When an action button holds a spell, AdiButtonAuras uses its identifier to select the rules to apply.

Different variants of a spell can exist because of a specialization, a talent or a glyph. Sometimes they have different spell identifiers. In that case, if a rule should apply to all variants, all spell identifiers should be listed.

h3. Units

A list of "UnitIds":http://wowpedia.org/UnitId to watch. This is not always the target of the spell itself. Depending on the rule, you may want to watch another unit (quite often @player@) to look for a buff that could modify the spell. For example, warlocks' Backdraft is a player buff that reduces the casting time and cost of Incinerate, so a rule showing the number of Backdraft stacks on Incinerate should watch "player" and not the target of "Incinerate".

In addition to the "standard UnitIds":http://wowpedia.org/UnitId#Base_Values, @"target"@, @"player"@, @"pet"@, @"focus"@, @"mouseover"@, AdiButtonAuras accepts three special UnitIds. They are resolved dynamically using the current target and the UI settings that affect targeting (self and focus keybindings, target self by default). Macro conditionals with @target:xxx@ should be detected and used.

Here are the three special UnitIds:

* @"ally"@: @"target"@ if the player can help it else @"player"@.
* @"enemy"@: @"target"@ if the player can attack it else @""@ (no one).
* @"default"@: like @"ally"@ if the spell is helpful (according to @IsSpellHelpful@), else like @"enemy"@.

h3. Events

A list of "events":http://wowpedia.org/Events indicating that the data may have changed and should be refreshed. Events starting with @UNIT_@ that do not concern one of the UnitIds of the rule are ignored.

The most common event is @UNIT_AURA@, since we are watching for auras.

h3. Handlers

The handlers are functions called to refresh the data. Their signature is @function(dynamicUnit, model)@, where:

* @dynamicUnit@ contains the UnitId resolved using @"default"@, @"ally"@ or @"enemy"@. If none of these were listed, or if the rule watches for a fixed unit, e.g. @"player"@, this argument must be ignored.
* @model@ is a table containing the data to display on the spell. The handler should update its attributes (see below).

@model@ have three attributes:

* @.expiration@: the expiration time of the (de)buff, like the return value of "GetTime()":http://wowpedia.org/API_GetTime, or the 7th return value of "UnitAura":http://wowpedia.org/API_UnitAura. This is used to display a countdown on the button. The default, 0, means "never expires".
* @.count@: the number of stacks of the (de)buff, like the 3rd return value of "UnitAura":http://wowpedia.org/API_UnitAura. The default, 0, means "no stack".
* @.highlight@: an effect to apply to the button, amongst @"good"@ (green border), @"bad"@ (red border), @"flash"@ (glowing animation). Any other value means "no highlight".

In several handlers, possibly from from differents rules, apply to the same spell, they are called in order of definition. Latter handlers could see the results of previous ones in @model@. No assumptions is made about how they handle existing values. Most of the time they just overwrite them.
